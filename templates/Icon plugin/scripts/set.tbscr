string.equal t.0 %pn ""
string.equal t.1 %tn ""
bool.or t.2 t.0 t.1
if t.2 {
	console.print "Please execute this in a project folder"
	exit
}

math.greater def.0 args.length "0"

if def.0 {
	table.add stack args.0
	call tryPath
	table.pop def.1 stack
	if def.1 {
		call setFolder
		call tryDotnet
		exit
	}
	console.print "Invalid CLI path for icon file"
}

string.set con.0 "0"

do! con.0 {
	console.ask def.2 "Enter the path to the icon file: "
	table.add stack def.2
	call tryPath
	table.pop con.0 stack
}

call setFolder
call tryDotnet

function setFolder {
	scope ini
	
	string.equal ini.0 %os "windows"
	if! ini.0 {
		console.print "Linux and MacOS not supported for folder icons."
		return
	}
	
	plugin.read ini.0 %pl "desktop"
	
	table.peek ini.1 stack
	self.replace ini.0 "@icon" ini.1
	
	process.cmd f"attrib -s -r \"{%wd}\""
	process.cmd f"attrib -s -r -h desktop.ini"
	file.delete "W/desktop.ini"
	
	file.create "W/desktop.ini"
	file.write "W/desktop.ini" ini.0
	process.cmd f"attrib +s +r \"{%wd}\""
	process.cmd "attrib +h +s +r desktop.ini"
}

function tryDotnet {
	scope def
	string.equal def.0 %tn "dotnet"
	if! def.0 {
		return
	}
	
	folder.list li "W" "*.csproj"
	math.greater def.1 li.length "0"
	
	if! def.1 {
		return
	}
	
	file.read csproj.0 li.0
	
	table.peek def.2 stack
	self.replace csproj.0 "<!--@icon-->" f"<ApplicationIcon>{def.2}</ApplicationIcon>"
	file.write li.0 csproj.0
}

//Returns true/false and the path if true
function tryPath {
	scope cont
	table.pop cont.0 stack
	self.removeQuotes cont.0
	
	file.exists cont.1 cont.0
	path.extension cont.2 cont.0
	self.lower cont.2
	string.equal cont.3 cont.2 ".ico"
	bool.and cont.4 cont.1 cont.3
	if cont.4 {
		table.add stack cont.0
		table.add stack true.0
		return
	}
	
	table.add stack false.0
}

