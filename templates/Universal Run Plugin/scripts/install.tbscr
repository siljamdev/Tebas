call handleFragRoom
call handleBrowser
call handlePython

console.print "Installation finished!"

function handleFragRoom {
	math.greater def.0 args.length "0"
	if def.0 {
		table.add stack args.0
		call tryPath
		table.pop def.1 stack
		if def.1 {
			console.print "Fragroom path gotten from CLI arguments"
			call successFragRoom
			return
		}
		console.print "Invalid CLI path for Fragroom"
	}
	
	shared.read sh.0 "fgromPath"
	string.equal def.0 sh.0 ""
	if! def.0 {
		table.add stack sh.0
		call tryPath
		table.pop def.1 stack
		if def.1 {
			console.print "Fragroom path gotten from shared storage"
			call successFragRoom
			return
		}
	}
	
	string.set con.0 "0"
	
	do! con.0 {
		console.ask def.2 "Enter the path to Fragroom executable: "
		string.equal def.3 def.2 ""
		if def.3 {
			return
		}
		table.add stack def.2
		call tryPath
		table.pop con.0 stack
	}
	
	call successFragRoom
}

function handleBrowser {
	math.greater def.0 args.length "1"
	if def.0 {
		table.add stack args.1
		call tryPath
		table.pop def.1 stack
		if def.1 {
			console.print "Browser path gotten from CLI arguments"
			call successBrowser
			return
		}
		console.print "Invalid CLI path for browser"
	}
	
	shared.read sh.0 "browserPath"
	string.equal def.0 sh.0 ""
	if! def.0 {
		table.add stack sh.0
		call tryPath
		table.pop def.1 stack
		if def.1 {
			console.print "Browser path gotten from shared storage"
			call successBrowser
			return
		}
	}
	
	string.set con.0 "0"
	
	do! con.0 {
		console.ask def.2 "Enter the path to a browser executable: "
		table.add stack def.2
		call tryPath
		table.pop con.0 stack
	}
	
	call successBrowser
}

function handlePython {
	math.greater def.0 args.length "2"
	if def.0 {
		table.add stack args.2
		call tryPath
		table.pop def.1 stack
		if def.1 {
			console.print "Python path gotten from CLI arguments"
			call successPython
			return
		}
		console.print "Invalid CLI path for python"
	}
	
	shared.read sh.0 "pythonPath"
	string.equal def.0 sh.0 ""
	if! def.0 {
		table.add stack sh.0
		call tryPath
		table.pop def.1 stack
		if def.1 {
			console.print "Python path gotten from shared storage"
			call successPython
			return
		}
	}
	
	table.add stack "python"
	call tryPathVar
	table.pop def.1 stack
	if def.1 {
		console.print "Python path gotten from PATH variable"
		call successPython
		return
	}
	
	string.set con.0 "0"
	
	do! con.0 {
		console.ask def.2 "Enter the path to python executable: "
		string.equal def.3 def.2 ""
		if def.3 {
			return
		}
		table.add stack def.2
		call tryPath
		table.pop con.0 stack
	}
	
	call successPython
}

function successFragRoom {
	scope cont
	table.pop cont.0 stack
	
	plugin.write %pl "fgromPath" cont.0
	
	string.equal cont.1 cont.0 ""
	if! cont.1 {
		shared.write "fgromPath" cont.0
	}
}

function successBrowser {
	scope cont
	table.pop cont.0 stack
	
	plugin.write %pl "browserPath" cont.0
	
	string.equal cont.1 cont.0 ""
	if! cont.1 {
		shared.write "browserPath" cont.0
	}
}

function successPython {
	scope cont
	table.pop cont.0 stack
	
	plugin.write %pl "pythonPath" cont.0
	
	string.equal cont.1 cont.0 ""
	if! cont.1 {
		shared.write "pythonPath" cont.0
	}
}

//Returns true/false and the path if true
function tryPath {
	scope cont
	table.pop cont.0 stack
	self.removeQuotes cont.0
	
	file.isExecutable cont.1 cont.0
	if cont.1 {
		table.add stack cont.0
		table.add stack true.0
		return
	}
	
	process.isExecutableInPath cont.1 cont.0
	if cont.1 {
		table.add stack cont.0
		table.add stack true.0
		return
	}
	
	table.add stack false.0
}

//Returns true if its in the PATH variable
function tryPathVar {
	scope cont
	table.pop cont.0 stack
	self.removeQuotes cont.0
	
	process.isExecutableInPath cont.1 cont.0
	if cont.1 {
		table.add stack cont.0
		table.add stack true.0
		return
	}
	
	table.add stack false.0
}
