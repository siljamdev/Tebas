console.print "Publish dotnet project"

math.equal check.0 args.length "0"
math.equal check.1 args.0 ""
bool.or check.2 check.0 check.1

if check.2 {
	console.print "The script expects a version, and none was provided"
	exit
}

string.set def.0 args.0
console.print f"The version is {def.0}" //def.0 is version

string.set def.1 "W/releases/"
self.append def.1 def.0

folder.exists check.0 def.1
if check.0 {
	console.ask anw.0 "That version already exists. Do you want to override it? (Y/N): "
	self.upper anw.0
	string.equal anw.1 anw.0 "Y"
	
	if! anw.1 {
		exit
	}
	
	folder.delete def.1
}

folder.create def.1

call setup7zip
call setupDotnet
call setupPdb
call setupCopyfiles
call setupNaming

project.read targets.0 "publishTarget"
string.split targets targets.0 [","]

string.set t.1 "0"
math.less t.2 t.1 targets.length
while t.2 {
	table.access t.3 targets t.1
	
	self.trim t.3
	table.add stack t.3
	call publish
	
	math.sumUp t.1 t.1
	math.less t.2 t.1 targets.length
}

console.print "Publishing finished!"

function setup7zip {
	project.read zip.0 "use7zip"
	
	if zip.0 {
		template.read zip.1 "7zipPath"
	}
}

function setupPdb {
	project.read pdb.0 "deletePdb"
}

function setupDotnet {
	template.read dotnetPath.0 "dotnetPath"
}

function setupCopyfiles {
	project.read copyFiles.0 "copyPubFiles"
}

function setupNaming {
	scope nam
	project.read naming.0 "publishName"
	string.equal nam.0 naming.0 ""
	if nam.0 {
		string.set naming.0 "@og"
	}
}

function publish { //expects target platform in stack
	scope pub
	
	table.pop pub.0 stack
	
	table.contains pub.1 ["win-x64","win-x86","win-arm","win-arm64","linux-x64","linux-arm","linux-arm64","osx-x64","osx-arm64","freebsd-x64","freebsd-arm","freebsd-arm64","ios-arm64","android-arm","android-arm64","tizen-x64","tvos-arm64","watchos-arm64"] pub.0
	
	if! pub.1 {
		console.print f"Unsopported release platform: {pub.0}"
		return
	}
	
	folder.create f"W/releases/{def.0}/{pub.0}"
	
	process.run dotnetPath.0 f"publish -r {pub.0} -c Release --output releases/{def.0}/{pub.0}"
	
	if pdb.0 {
		folder.list files f"W/releases/{def.0}/{pub.0}" "*.pdb"
		
		string.set pdb.1 "0"
		math.less pdb.2 pdb.1 files.length
		while pdb.2 {
			table.access pdb.3 files pdb.1
			file.delete pdb.3
			
			math.sumUp pdb.1 pdb.1
			math.less pdb.2 pdb.1 files.length
		}
	}
	
	table.contains isWindows.0 ["win-x64","win-x86","win-arm","win-arm64"] pub.0
	
	if isWindows.0 {
		folder.list files f"W/releases/{def.0}/{pub.0}" "*.exe"
		
		string.set exe.1 "0"
		math.less exe.2 exe.1 files.length
		while exe.2 {
			table.access exe.3 files exe.1
			
			path.filenameNoExtension exe.5 exe.3
			
			string.set exe.4 naming.0
			self.replace exe.4 "@og" exe.5
			self.replace exe.4 "@ver" def.0
			self.replace exe.4 "@arq" pub.0
			self.replace exe.4 "@nam" %pn
			
			file.rename exe.3 f"W/releases/{def.0}/{pub.0}/{exe.4}.exe"
			
			math.sumUp exe.1 exe.1
			math.less exe.2 exe.1 files.length
		}
	}
	
	if zip.0 {
		if isWindows.0 {
			string.set zip.2 f"releases/{def.0}/{exe.4}.zip"
		} else {
			string.set zip.2 f"releases/{def.0}/{%pn}_{def.0}_{pub.0}.zip"
		}
		
		string.set zip.3 f"./releases/{def.0}/{pub.0}*"
		
		string.set zip.4 f"a -tzip \"{zip.2}\" \"{zip.3}\""
		
		process.run zip.1 zip.4
	}
	
	if copyFiles.0 {
		folder.list files f"W/releases/{def.0}/{pub.0}" "*"
		
		string.set exe.1 "0"
		math.less exe.2 exe.1 files.length
		while exe.2 {
			table.access exe.3 files exe.1
			
			path.filename exe.4 exe.3
			
			file.copy exe.3 f"W/releases/{def.0}/{exe.4}"
			
			math.sumUp exe.1 exe.1
			math.less exe.2 exe.1 files.length
		}
		
		folder.delete f"W/releases/{def.0}/{pub.0}"
	}
	
	console.print f"Published for {pub.0}"
}
