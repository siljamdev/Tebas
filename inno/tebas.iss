; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Tebas"
#define MyAppVersion "0.4.1"
#define MyAppPublisher "AshProj"
#define MyAppURL "https://github.com/siljamdev/Tebas"
; Not source, but the created executable once installed. AND SOURCE TOO!
#define MyAppExeName "tebas.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{53E69D5E-1898-46F6-BB88-8AECAB11AB2E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\Tebas
DisableDirPage=yes

 
;This lets the user decide. If admin rights are required, they will be prompted.
PrivilegesRequired=lowest


; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename={#MyAppName}_installer_v{#MyAppVersion}_winx64
Compression=lzma
SolidCompression=yes
WizardStyle=modern
SetupIconFile="icon.ico"
ChangesEnvironment=true

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{#MyAppName}_portable_{#MyAppVersion}_winx64.exe"; DestDir: "{app}"; DestName: "{#MyAppExeName}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

; Add to PATH environment variable
[Registry]
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; \
    ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}\"; \
    Check: NeedsAddPath(ExpandConstant('{app}\'))

; Register .tbtem files
Root: HKCR; Subkey: ".tbtem"; ValueType: string; ValueData: "Tebas.Template"; Flags: uninsdeletekey
Root: HKCR; Subkey: "Tebas.Template\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""

; Register .tebas files
Root: HKCR; Subkey: ".tebas"; ValueType: string; ValueData: "Tebas.Project"; Flags: uninsdeletekey
Root: HKCR; Subkey: "Tebas.Project\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""

; Register .tbplg files
Root: HKCR; Subkey: ".tbplg"; ValueType: string; ValueData: "Tebas.Plugin"; Flags: uninsdeletekey
Root: HKCR; Subkey: "Tebas.Plugin\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""
	
	; Register .tbscr files
Root: HKCR; Subkey: ".tbscr"; ValueType: string; ValueData: "Tebas.Script"; Flags: uninsdeletekey
Root: HKCR; Subkey: "Tebas.Plugin\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""
    
[Code]
const EnvironmentKey = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
const INSTALL_MODE_ALL_USERS = 1;
const INSTALL_MODE_LOCAL_ONLY = 2;

var
  InstallMode: Integer;

procedure InitializeWizard;
begin
  InstallMode := INSTALL_MODE_ALL_USERS;  // Default to "Install for All Users"

  // Add a custom page for installation mode selection
  // This is a simple input page where the user can select their preference
  // We will create a radio button with two choices
  CreateStringChangePage(wpSelectDir, 'Select installation mode', 
    'Select whether to install for all users or just for yourself:', True);
  
  // Adding radio button for "Install for all users" option
  AddRadioButton('Install for all users', INSTALL_MODE_ALL_USERS);
  // Adding radio button for "Install only for me" option (local install)
  AddRadioButton('Install for me (local)', INSTALL_MODE_LOCAL_ONLY);
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  // Check the selected installation mode
  if InstallMode = INSTALL_MODE_LOCAL_ONLY then
  begin
    // Change DefaultDirName to install in AppData for the current user
    DefaultDirName := ExpandConstant('{userappdata}\{#MyAppName}');
  end
  else
  begin
    // Default for all users (Program Files)
    DefaultDirName := '{autopf}\{#MyAppName}';
  end;
end;




function NeedsAddPath(Param: string): boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
    EnvironmentKey,
    'Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  { look for the path with leading and trailing semicolon }
  { Pos() returns 0 if not found }
  Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;

procedure EnvRemovePath(Path: string);
var
    Paths: string;
    P: Integer;
begin
    { Skip if registry entry not exists }
    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, EnvironmentKey, 'Path', Paths) then
        exit;

    { Skip if string not found in path }
    P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
    if P = 0 then exit;

    { Update path variable }
    Delete(Paths, P - 1, Length(Path) + 1);

    { Overwrite path environment variable }
    if RegWriteStringValue(HKEY_LOCAL_MACHINE, EnvironmentKey, 'Path', Paths)
    then Log(Format('The [%s] removed from PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while removing the [%s] from PATH: [%s]', [Path, Paths]));
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if CurUninstallStep = usPostUninstall
    then EnvRemovePath(ExpandConstant('{app}\'));
end;

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"