; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Tebas"
#define MyAppVersion "0.5.1"
#define MyAppPublisher "AshProj"
#define MyAppURL "https://github.com/siljamdev/Tebas"
; Not source, but the created executable once installed. AND SOURCE TOO!
#define MyAppExeName "tebas.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{53E69D5E-1898-46F6-BB88-8AECAB11AB2E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\Tebas

 
;This lets the user decide. If admin rights are required, they will be prompted.
PrivilegesRequired=admin
PrivilegesRequiredOverridesAllowed=dialog
UsePreviousPrivileges=no

DisableDirPage=no


; "ArchitecturesAllowed=x64compatible" specifies that Setup cannot run
; on anything but x64 and Windows 11 on Arm.
ArchitecturesAllowed=x64compatible
; "ArchitecturesInstallIn64BitMode=x64compatible" requests that the
; install be done in "64-bit mode" on x64 or Windows 11 on Arm,
; meaning it should use the native 64-bit Program Files directory and
; the 64-bit view of the registry.
ArchitecturesInstallIn64BitMode=x64compatible
ChangesAssociations=yes
DisableProgramGroupPage=yes
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename={#MyAppName}_installer_v{#MyAppVersion}_winx64
Compression=lzma
SolidCompression=yes
WizardStyle=modern
SetupIconFile="icon.ico"
ChangesEnvironment=true

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "{#MyAppName}_portable_v{#MyAppVersion}_winx64.exe"; DestDir: "{app}"; DestName: "{#MyAppExeName}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

; Add to PATH environment variable
[Registry]
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; \
    ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}\"; \
    Check: NeedsAddPathAdmin(ExpandConstant('{app}\'))

Root: HKCU; Subkey: "Environment"; \
    ValueType: expandsz; ValueName: "Path"; ValueData: "{olddata};{app}\"; \
    Check: NeedsAddPathLocal(ExpandConstant('{app}\'))

; Register .tbtem files
Root: HKA; Subkey: "Software\Classes\.tbtem"; ValueType: string; ValueData: "Tebas.Template"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\Tebas.Template\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""; Flags: uninsdeletekey

; Register .tebas files
Root: HKA; Subkey: "Software\Classes\.tebas"; ValueType: string; ValueData: "Tebas.Project"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\Tebas.Project\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""; Flags: uninsdeletekey

; Register .tbplg files
Root: HKA; Subkey: "Software\Classes\.tbplg"; ValueType: string; ValueData: "Tebas.Plugin"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\Tebas.Plugin\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""; Flags: uninsdeletekey
	
	; Register .tbscr files
Root: HKA; Subkey: "Software\Classes\.tbscr"; ValueType: string; ValueData: "Tebas.Script"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\Tebas.Script\shell\open\command"; \
    ValueType: string; ValueData: """{app}\tebas.exe"" ""%1"""; Flags: uninsdeletekey
    
[Code]
const EnvironmentKeyAdmin = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
const EnvironmentKeyLocal = 'Environment';

function NeedsAddPathAdmin(Param: string): boolean;
var
  OrigPath: string;
begin
  if not isAdminInstallMode then begin
    Result := False;
	exit;
  end;
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,
    EnvironmentKeyAdmin,
    'Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  Result := Pos(';' + Param + ';', ';' + OrigPath + ';') = 0;
end;

function NeedsAddPathLocal(Param: string): boolean;
var
  OrigPath: string;
begin
 if isAdminInstallMode then begin
    Result := False;
	exit;
  end;
  if not RegQueryStringValue(HKEY_CURRENT_USER,
    EnvironmentKeyLocal,
    'Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  // look for the path with leading and trailing semicolon
  // Pos() returns 0 if not found
  Result := Pos(';' + Uppercase(Param) + ';', ';' + Uppercase(OrigPath) + ';') = 0;
end;

procedure EnvRemovePathAdmin(Path: string);
var
    Paths: string;
    P: Integer;
begin
    //Skip if registry entry not exists
    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, EnvironmentKeyAdmin, 'Path', Paths) then
        exit;

    //Skip if string not found in path
    P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
    if P = 0 then exit;

    //Update path variable
    Delete(Paths, P - 1, Length(Path) + 1);

    //Overwrite path environment variable
    if RegWriteStringValue(HKEY_LOCAL_MACHINE, EnvironmentKeyAdmin, 'Path', Paths)
    then Log(Format('The [%s] removed from PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while removing the [%s] from PATH: [%s]', [Path, Paths]));
end;

procedure EnvRemovePathLocal(Path: string);
var
    Paths: string;
    P: Integer;
begin
    //Skip if registry entry not exists
    if not RegQueryStringValue(HKEY_CURRENT_USER, EnvironmentKeyLocal, 'Path', Paths) then
        exit;

    //Skip if string not found in path
    P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
    if P = 0 then exit;

    //Update path variable
    Delete(Paths, P - 1, Length(Path) + 1);

    //Overwrite path environment variable
    if RegWriteStringValue(HKEY_CURRENT_USER, EnvironmentKeyLocal, 'Path', Paths)
    then Log(Format('The [%s] removed from PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while removing the [%s] from PATH: [%s]', [Path, Paths]));
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if CurUninstallStep = usPostUninstall
    then begin
	  if isAdmin then 
	    EnvRemovePathAdmin(ExpandConstant('{app}\'))
	  else
	    EnvRemovePathLocal(ExpandConstant('{app}\'));
	end;
end;

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"