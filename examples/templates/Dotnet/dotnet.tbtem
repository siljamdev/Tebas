namedotnetgit.defaultUsegit.gitignore$obj/
bin/
releases/
/nuget.config	addReadmecodeExtensions.cscodeFilesFolderBlacklistbin
obj
.gitscript.info†console.print "Info dotnet project"
project.read def.0 "dateCreated"
console.print "This is a dotnet project created on the {def.0}"script.installIconsole.print "Installation of dotnet template"

console.ask def.0 "What is your author name?: "
template.write "author" def.0

console.ask def.0 "What is your company name?: "
template.write "company" def.0

console.ask def.0 "Do you want to use 7zip on publish? (Y/N): "
self.upper def.0

string.equal def.1 def.0 "Y"
if def.1 {
	template.write "use7zip" true.0
	
	do! con.0 {
		console.ask def.2 "Enter the path to 7z.exe: "
		self.removeQuotes def.2
		file.exists con.0 def.2
	}
	
	template.write "7zipPath" def.2
}

console.print "Installation finished!"

script.newconsole.print "New dotnet project"

//Csproj
file.exists cp.0 "W/*.csproj"
if! cp.0 {
	template.read cp.1 "csproj"
	
	template.read cp.2 "author"
	self.replace cp.1 "@author" cp.2
	
	template.read cp.2 "company"
	self.replace cp.1 "@company" cp.2
	
	console.ask cp.2 "What is the description of the project?: "
	self.replace cp.1 "@desc" cp.2
	
	string.set cp.3 "W/{%pn}.csproj"
	self.expand cp.3
	
	file.create cp.3
	file.write cp.3 cp.1
}

//program
file.exists pr.0 "W/*.cs"
if! pr.0 {
	template.read pr.1 "program"
	
	self.replace pr.1 "@name" %pn
	
	string.set pr.3 "W/{%pn}.cs"
	self.expand pr.3
	
	file.create pr.3
	file.write pr.3 pr.1
}

folder.create "W/releases"

project.write "timesCompiled" "0"

project.write "dateCreated" %d
script.packageƒconsole.print "Package dotnet project"

string.set def.1 "add package "
self.append def.1 args.0

process.run "dotnet" def.1
script.publishYconsole.print "Publish dotnet project"

string.set def.0 args.0
console.print "The version is {def.0}"

//console.ask def.0 "What is the version(Ex: v1.0.0_winx64)?: "

string.set def.1 "W/releases/"
self.append def.1 def.0

folder.create def.1

do! con.0 {
	console.print "Possible OS:"
	console.print "    win-x64, win-x86"
	console.print "    win-arm, win-arm64"
	console.print "    linux-x64, linux-arm, linux-arm64"
	console.print "    osx-x64, osx-arm64"
	console.print "    freebsd-x64, freebsd-arm, freebsd-arm64"
	console.print "    ios-arm64"
	console.print "    android-arm, android-arm64"
	console.print "    tizen-x64"
	console.print "    tvos-arm64"
	console.print "    watchos-arm64"
	
	console.ask con.1 "Which one to use? "
	
	table.contains con.0 ["win-x64","win-x86","win-arm","win-arm64","linux-x64","linux-arm","linux-arm64","osx-x64","osx-arm64","freebsd-x64","freebsd-arm","freebsd-arm64","ios-arm64","android-arm","android-arm64","tizen-x64","tvos-arm64","watchos-arm64"] con.1
}

string.set dotnet.0 "publish -p:PublishSingleFile=true -r {con.1} -c Release --self-contained true --output releases/{def.0}"
self.expand dotnet.0

process.run "dotnet" dotnet.0

string.set pdb.0 "W/releases/{def.0}"
self.expand pdb.0

folder.list files pdb.0 "*.pdb"

string.set pdb.1 "0"
math.less pdb.2 pdb.1 files.length
while pdb.2 {
	table.access pdb.3 files pdb.1
	file.delete pdb.3
	
	math.sumUp pdb.1 pdb.1
	
	math.less pdb.2 pdb.1 files.length
}

template.read zip.0 "use7zip"

if zip.0 {
	template.read zip.1 "7zipPath"
	
	string.set zip.2 "releases/{%pn}_{def.0}_{con.1}.zip"
	self.expand zip.2
	
	string.set zip.3 "./releases/{def.0}/*"
	self.expand zip.3
	
	string.set zip.4 "a -tzip \"{zip.2}\" \"{zip.3}\""
	self.expand zip.4
	
	process.run zip.1 zip.4
}

console.print "Publishing finished!"
script.run¥console.print "Run dotnet project"

process.run "dotnet" "run"

project.read def.0 "timesCompiled"
math.sumUp def.0 def.0
project.write "timesCompiled" def.0
script.stats†console.print "Stats dotnet project"
project.read def.0 "timesCompiled"
console.print "This project has been compiled {def.0} times"resources.csprojÃ<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    
    <Version>1.0.0</Version>
    <Authors>@author</Authors>
    <Company>@company</Company>
    <PackageDescription>@desc</PackageDescription>
	
	<PublishSingleFile>true</PublishSingleFile>
  </PropertyGroup>
  
</Project>resources.programŸusing System;

//Auto generated by Tebas project manager
class @name{
	public static void Main(string[] args){
		Console.WriteLine("Hello World!");
	}
}